From 1cfa636aafd0d7167d5ee876a0ae4f8e535d6589 Mon Sep 17 00:00:00 2001
From: hienhuynh <hien.huynh.px@renesas.com>
Date: Tue, 8 Mar 2022 14:10:07 +0700
Subject: [PATCH 03/11] mmngr: Get start address of MMP area from DT

Instead of hardcode, we will get start address of MMP area from DT
for flexible usage. It also check the MMP area if inside legacy area of
memory slot when we won't use IPMMU.

Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Signed-off-by: hienhuynh <hien.huynh.px@renesas.com>
---
 .../mmngr-module/files/mmngr/drv/mmngr_drv.c  | 54 ++++++++++++++++++-
 .../files/mmngr/include/mmngr_private.h       | 12 -----
 2 files changed, 52 insertions(+), 14 deletions(-)

diff --git a/mmngr_drv/mmngr/mmngr-module/files/mmngr/drv/mmngr_drv.c b/mmngr_drv/mmngr/mmngr-module/files/mmngr/drv/mmngr_drv.c
index 0889f26..107a90c 100644
--- a/mmngr_drv/mmngr/mmngr-module/files/mmngr/drv/mmngr_drv.c
+++ b/mmngr_drv/mmngr/mmngr-module/files/mmngr/drv/mmngr_drv.c
@@ -95,7 +95,10 @@ static bool			have_lossy_entries;
 #ifdef MMNGR_SSP_ENABLE
 static bool			is_sspbuf_valid;
 #endif
-#ifdef IPMMU_MMU_SUPPORT
+#ifndef IPMMU_MMU_SUPPORT
+static u64			legacy_memory_addr;
+static u64			legacy_memory_size;
+#else
 static bool			ipmmu_common_init_done;
 static bool			is_mmu_tlb_disabled;
 static u64			ipmmu_addr_section_0;
@@ -1141,6 +1144,19 @@ static int validate_memory_map(void)
 	const char *buf_name;
 #endif
 
+#ifndef IPMMU_MMU_SUPPORT
+	if ((mm_kernel_reserve_addr + mm_kernel_reserve_size) > 
+	    (legacy_memory_addr + legacy_memory_size)) {
+		pr_warn("The kernel reserved area (0x%09lx - 0x%09lx) is out of "\
+			"the legacy area of memory (0x%09lx - 0x%09lx) \n",
+			mm_kernel_reserve_addr,
+			mm_kernel_reserve_addr + mm_kernel_reserve_size,
+			legacy_memory_addr,
+			legacy_memory_addr + legacy_memory_size);
+		return -1;
+	}
+#endif
+
 	if (mm_kernel_reserve_size < MM_OMXBUF_SIZE) {
 		pr_warn("The size (0x%x) of OMXBUF is over "\
 			"the kernel reserved size (0x%llx) for Multimedia.\n",
@@ -1215,6 +1231,32 @@ static int _parse_reserved_mem_dt(struct device_node *np,
 	return ret;
 }
 
+#ifndef IPMMU_MMU_SUPPORT
+static int parse_legacy_memory_node(struct device_node *np)
+{
+	int ret = -1;
+	u64 memory_addr;
+	u64 memory_size;
+	struct device_node *node = NULL;
+
+	for_each_child_of_node(np, node) {
+		if(of_property_match_string(node, "device_type", "memory") >= 0){
+			__be32 *regaddr_p = NULL;
+			regaddr_p = of_get_address(node, 0, &memory_size, NULL);
+			if (regaddr_p)
+				memory_addr = of_translate_address(node, regaddr_p);
+			if ( memory_size && ((memory_addr & 0xF00000000) == 0x0)) {
+				legacy_memory_addr = memory_addr;
+				legacy_memory_size = memory_size;
+				ret = 0;
+				break;
+			}
+		}
+	}
+	return ret;
+}
+#endif
+
 static int parse_reserved_mem_dt(struct device_node *np)
 {
 	int ret = 0;
@@ -1705,6 +1747,14 @@ static int mm_probe(struct platform_device *pdev)
 	struct device_node	*np = dev->of_node;
 	unsigned long		mm_omxbuf_size;
 
+#ifndef IPMMU_MMU_SUPPORT
+	ret = parse_legacy_memory_node(np->parent);
+	if (ret) {
+		pr_err("%s MMD ERROR\n", __func__);
+		return -1;
+	}
+#endif
+
 	ret = parse_reserved_mem_dt(np);
 	if (ret) {
 		pr_err("%s MMD ERROR\n", __func__);
@@ -1722,7 +1772,7 @@ static int mm_probe(struct platform_device *pdev)
 #else
 	mm_omxbuf_size = mm_kernel_reserve_size - MM_SSPBUF_SIZE;
 #endif
-	ret = alloc_bm(&bm, MM_OMXBUF_ADDR, mm_omxbuf_size, MM_CO_ORDER);
+	ret = alloc_bm(&bm, mm_kernel_reserve_addr, mm_omxbuf_size, MM_CO_ORDER);
 	if (ret) {
 		pr_err("%s MMD ERROR\n", __func__);
 		return -1;
diff --git a/mmngr_drv/mmngr/mmngr-module/files/mmngr/include/mmngr_private.h b/mmngr_drv/mmngr/mmngr-module/files/mmngr/include/mmngr_private.h
index ba1f0d1..56ab1f6 100644
--- a/mmngr_drv/mmngr/mmngr-module/files/mmngr/include/mmngr_private.h
+++ b/mmngr_drv/mmngr/mmngr-module/files/mmngr/include/mmngr_private.h
@@ -205,22 +205,10 @@ static void mm_exit(void);
 static int validate_memory_map(void);
 
 #ifdef MMNGR_SALVATORX
-#ifdef IPMMU_MMU_SUPPORT
-	#define MM_OMXBUF_ADDR	(mm_kernel_reserve_addr)
-#else
-	#define MM_OMXBUF_ADDR		(0x70000000UL)
-#endif /* IPMMU_MMU_SUPPORT */
-
 #define MM_OMXBUF_SIZE		(256 * 1024 * 1024)
 #endif /* MMNGR_SALVATORX */
 
 #ifdef MMNGR_EBISU
-#ifdef IPMMU_MMU_SUPPORT
-	#define MM_OMXBUF_ADDR	(mm_kernel_reserve_addr)
-#else
-	#define MM_OMXBUF_ADDR	(0x68000000UL)
-#endif /* IPMMU_MMU_SUPPORT */
-
 #define MM_OMXBUF_SIZE		(64 * 1024 * 1024)
 #endif /* MMNGR_EBISU */
 
-- 
2.25.1

